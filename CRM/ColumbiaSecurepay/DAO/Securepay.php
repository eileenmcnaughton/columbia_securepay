<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from columbia_securepay/xml/schema/CRM/ColumbiaSecurepay/Securepay.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:dafe88c1c53c618e091f20ed97853cae)
 */
use CRM_ColumbiaSecurepay_ExtensionUtil as E;

/**
 * Database access object for the Securepay entity.
 */
class CRM_ColumbiaSecurepay_DAO_Securepay extends CRM_Core_DAO {
  const EXT = E::LONG_NAME;
  const TABLE_ADDED = '';

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'civicrm_securepay';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = TRUE;

  /**
   * Unique Securepay ID
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $id;

  /**
   * Secure Pay Order ID
   *
   * @var string
   *   (SQL type: varchar(64))
   *   Note that values will be retrieved from the database as a string.
   */
  public $order_id;

  /**
   * Contribution ID
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $contribution_id;

  /**
   * Date contribution was received - not necessarily the creation date of the record
   *
   * @var string|null
   *   (SQL type: datetime)
   *   Note that values will be retrieved from the database as a string.
   */
  public $receive_date;

  /**
   * Total amount of this contribution. Use market value for non-monetary gifts.
   *
   * @var float|string
   *   (SQL type: decimal(20,2))
   *   Note that values will be retrieved from the database as a string.
   */
  public $amount;

  /**
   * @var bool|string
   *   (SQL type: tinyint)
   *   Note that values will be retrieved from the database as a string.
   */
  public $is_test;

  /**
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $processing_status_id;

  /**
   * @var int|string
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $order_status_id;

  /**
   * First Name.
   *
   * @var string|null
   *   (SQL type: varchar(64))
   *   Note that values will be retrieved from the database as a string.
   */
  public $first_name;

  /**
   * Last Name.
   *
   * @var string|null
   *   (SQL type: varchar(64))
   *   Note that values will be retrieved from the database as a string.
   */
  public $last_name;

  /**
   * Email address
   *
   * @var string|null
   *   (SQL type: varchar(254))
   *   Note that values will be retrieved from the database as a string.
   */
  public $email;

  /**
   * When the secure pay record was created.
   *
   * @var string
   *   (SQL type: timestamp)
   *   Note that values will be retrieved from the database as a string.
   */
  public $created_date;

  /**
   * When the secure pay record was created or modified.
   *
   * @var string
   *   (SQL type: timestamp)
   *   Note that values will be retrieved from the database as a string.
   */
  public $modified_date;

  /**
   * Concatenation of all routable street address components (prefix, street number, street name, suffix, unit
   * number OR P.O. Box). Apps should be able to determine physical location with this data (for mapping, mail
   * delivery, etc.).
   *
   * @var string|null
   *   (SQL type: varchar(96))
   *   Note that values will be retrieved from the database as a string.
   */
  public $street_address;

  /**
   * Supplemental Address Information, Line 1
   *
   * @var string|null
   *   (SQL type: varchar(96))
   *   Note that values will be retrieved from the database as a string.
   */
  public $supplemental_address_1;

  /**
   * City, Town or Village Name.
   *
   * @var string|null
   *   (SQL type: varchar(64))
   *   Note that values will be retrieved from the database as a string.
   */
  public $city;

  /**
   * State.
   *
   * @var string|null
   *   (SQL type: varchar(64))
   *   Note that values will be retrieved from the database as a string.
   */
  public $state;

  /**
   * Store both US (zip5) AND international postal codes. App is responsible for country/region appropriate validation.
   *
   * @var string|null
   *   (SQL type: varchar(64))
   *   Note that values will be retrieved from the database as a string.
   */
  public $postal_code;

  /**
   * Secure Pay data
   *
   * @var string|null
   *   (SQL type: text)
   *   Note that values will be retrieved from the database as a string.
   */
  public $data;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_securepay';
    parent::__construct();
  }

  /**
   * Returns localized title of this entity.
   *
   * @param bool $plural
   *   Whether to return the plural version of the title.
   */
  public static function getEntityTitle($plural = FALSE) {
    return $plural ? E::ts('Securepays') : E::ts('Securepay');
  }

  /**
   * Returns foreign keys and entity references.
   *
   * @return array
   *   [CRM_Core_Reference_Interface]
   */
  public static function getReferenceColumns() {
    if (!isset(Civi::$statics[__CLASS__]['links'])) {
      Civi::$statics[__CLASS__]['links'] = static::createReferenceColumns(__CLASS__);
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'contribution_id', 'civicrm_contribution', 'id');
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'links_callback', Civi::$statics[__CLASS__]['links']);
    }
    return Civi::$statics[__CLASS__]['links'];
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => E::ts('Unique Securepay ID'),
          'required' => TRUE,
          'where' => 'civicrm_securepay.id',
          'table_name' => 'civicrm_securepay',
          'entity' => 'Securepay',
          'bao' => 'CRM_ColumbiaSecurepay_DAO_Securepay',
          'localizable' => 0,
          'html' => [
            'type' => 'Number',
          ],
          'readonly' => TRUE,
          'add' => NULL,
        ],
        'order_id' => [
          'name' => 'order_id',
          'type' => CRM_Utils_Type::T_STRING,
          'description' => E::ts('Secure Pay Order ID'),
          'required' => 1,
          'maxlength' => 64,
          'size' => CRM_Utils_Type::BIG,
          'where' => 'civicrm_securepay.order_id',
          'table_name' => 'civicrm_securepay',
          'entity' => 'Securepay',
          'bao' => 'CRM_ColumbiaSecurepay_DAO_Securepay',
          'localizable' => 0,
          'add' => NULL,
        ],
        'contribution_id' => [
          'name' => 'contribution_id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => E::ts('Contribution ID'),
          'where' => 'civicrm_securepay.contribution_id',
          'table_name' => 'civicrm_securepay',
          'entity' => 'Securepay',
          'bao' => 'CRM_ColumbiaSecurepay_DAO_Securepay',
          'localizable' => 0,
          'FKClassName' => 'CRM_Contribute_DAO_Contribution',
          'add' => NULL,
        ],
        'receive_date' => [
          'name' => 'receive_date',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => E::ts('Date Received'),
          'description' => E::ts('Date contribution was received - not necessarily the creation date of the record'),
          'import' => TRUE,
          'where' => 'civicrm_securepay.receive_date',
          'headerPattern' => '/receive(.?date)?/i',
          'dataPattern' => '/^\d{4}-?\d{2}-?\d{2} ?(\d{2}:?\d{2}:?(\d{2})?)?$/',
          'export' => TRUE,
          'table_name' => 'civicrm_securepay',
          'entity' => 'Securepay',
          'bao' => 'CRM_ColumbiaSecurepay_DAO_Securepay',
          'localizable' => 0,
          'html' => [
            'type' => 'Select Date',
            'formatType' => 'activityDateTime',
          ],
          'add' => '1.0',
        ],
        'amount' => [
          'name' => 'amount',
          'type' => CRM_Utils_Type::T_MONEY,
          'title' => E::ts('Amount'),
          'description' => E::ts('Total amount of this contribution. Use market value for non-monetary gifts.'),
          'required' => TRUE,
          'precision' => [
            20,
            2,
          ],
          'import' => TRUE,
          'where' => 'civicrm_securepay.amount',
          'dataPattern' => '/^\d+(\.\d{2})?$/',
          'export' => TRUE,
          'table_name' => 'civicrm_securepay',
          'entity' => 'Securepay',
          'bao' => 'CRM_ColumbiaSecurepay_DAO_Securepay',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
            'label' => E::ts("Total Amount"),
          ],
          'add' => '1.0',
        ],
        'activity_is_test' => [
          'name' => 'is_test',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => E::ts('Test'),
          'required' => TRUE,
          'import' => TRUE,
          'where' => 'civicrm_securepay.is_test',
          'headerPattern' => '/(is.)?test(.activity)?/i',
          'export' => TRUE,
          'default' => '0',
          'table_name' => 'civicrm_securepay',
          'entity' => 'Securepay',
          'bao' => 'CRM_ColumbiaSecurepay_DAO_Securepay',
          'localizable' => 0,
          'html' => [
            'type' => 'CheckBox',
          ],
          'add' => '1.0',
        ],
        'processing_status_id' => [
          'name' => 'processing_status_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Processing Status ID'),
          'where' => 'civicrm_securepay.processing_status_id',
          'default' => '1',
          'table_name' => 'civicrm_securepay',
          'entity' => 'Securepay',
          'bao' => 'CRM_ColumbiaSecurepay_DAO_Securepay',
          'localizable' => 0,
          'html' => [
            'type' => 'Select',
            'label' => E::ts("Processing Status"),
          ],
          'pseudoconstant' => [
            'callback' => 'CRM_ColumbiaSecurepay_BAO_Securepay::getProcessingStatuses',
          ],
          'add' => '1.0',
        ],
        'order_status_id' => [
          'name' => 'order_status_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Order Status ID'),
          'required' => 1,
          'where' => 'civicrm_securepay.order_status_id',
          'default' => '1',
          'table_name' => 'civicrm_securepay',
          'entity' => 'Securepay',
          'bao' => 'CRM_ColumbiaSecurepay_DAO_Securepay',
          'localizable' => 0,
          'html' => [
            'type' => 'Select',
            'label' => E::ts("Order Status"),
          ],
          'pseudoconstant' => [
            'callback' => 'CRM_ColumbiaSecurepay_BAO_Securepay::getOrderStatuses',
          ],
          'add' => '1.0',
        ],
        'first_name' => [
          'name' => 'first_name',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('First Name'),
          'description' => E::ts('First Name.'),
          'maxlength' => 64,
          'size' => 30,
          'import' => TRUE,
          'where' => 'civicrm_securepay.first_name',
          'headerPattern' => '/^first|(f(irst\s)?name)$/i',
          'dataPattern' => '/^\w+$/',
          'export' => TRUE,
          'contactType' => 'Individual',
          'table_name' => 'civicrm_securepay',
          'entity' => 'Securepay',
          'bao' => 'CRM_ColumbiaSecurepay_DAO_Securepay',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
            'label' => E::ts("First Name"),
          ],
          'add' => '1.0',
        ],
        'last_name' => [
          'name' => 'last_name',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Last Name'),
          'description' => E::ts('Last Name.'),
          'maxlength' => 64,
          'size' => 30,
          'import' => TRUE,
          'where' => 'civicrm_securepay.last_name',
          'headerPattern' => '/^last|(l(ast\s)?name)$/i',
          'dataPattern' => '/^\w+$/',
          'export' => TRUE,
          'contactType' => 'Individual',
          'table_name' => 'civicrm_securepay',
          'entity' => 'Securepay',
          'bao' => 'CRM_ColumbiaSecurepay_DAO_Securepay',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
            'label' => E::ts("Last Name"),
          ],
          'add' => '1.0',
        ],
        'email' => [
          'name' => 'email',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Email'),
          'description' => E::ts('Email address'),
          'maxlength' => 254,
          'size' => 30,
          'import' => TRUE,
          'where' => 'civicrm_securepay.email',
          'headerPattern' => '/e.?mail/i',
          'dataPattern' => '/^[a-zA-Z][\w\.-]*[a-zA-Z0-9]@[a-zA-Z0-9][\w\.-]*[a-zA-Z0-9]\.[a-zA-Z][a-zA-Z\.]*[a-zA-Z]$/',
          'export' => TRUE,
          'rule' => 'email',
          'table_name' => 'civicrm_securepay',
          'entity' => 'Securepay',
          'bao' => 'CRM_ColumbiaSecurepay_DAO_Securepay',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => '1.0',
        ],
        'created_date' => [
          'name' => 'created_date',
          'type' => CRM_Utils_Type::T_TIMESTAMP,
          'title' => E::ts('Created Date'),
          'description' => E::ts('When the secure pay record was created.'),
          'required' => FALSE,
          'where' => 'civicrm_securepay.created_date',
          'default' => 'CURRENT_TIMESTAMP',
          'table_name' => 'civicrm_securepay',
          'entity' => 'Securepay',
          'bao' => 'CRM_ColumbiaSecurepay_DAO_Securepay',
          'localizable' => 0,
          'add' => '1.0',
        ],
        'modified_date' => [
          'name' => 'modified_date',
          'type' => CRM_Utils_Type::T_TIMESTAMP,
          'title' => E::ts('Modified Date'),
          'description' => E::ts('When the secure pay record was created or modified.'),
          'required' => FALSE,
          'where' => 'civicrm_securepay.modified_date',
          'default' => 'CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP',
          'table_name' => 'civicrm_securepay',
          'entity' => 'Securepay',
          'bao' => 'CRM_ColumbiaSecurepay_DAO_Securepay',
          'localizable' => 0,
          'add' => '1.0',
        ],
        'street_address' => [
          'name' => 'street_address',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Street Address'),
          'description' => E::ts('Concatenation of all routable street address components (prefix, street number, street name, suffix, unit
      number OR P.O. Box). Apps should be able to determine physical location with this data (for mapping, mail
      delivery, etc.).'),
          'maxlength' => 96,
          'size' => CRM_Utils_Type::HUGE,
          'import' => TRUE,
          'where' => 'civicrm_securepay.street_address',
          'headerPattern' => '/(street|address)/i',
          'dataPattern' => '/^(\d{1,5}( [0-9A-Za-z]+)+)$|^(P\.?O\.\? Box \d{1,5})$/i',
          'export' => TRUE,
          'table_name' => 'civicrm_securepay',
          'entity' => 'Securepay',
          'bao' => 'CRM_ColumbiaSecurepay_DAO_Securepay',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => '1.0',
        ],
        'supplemental_address_1' => [
          'name' => 'supplemental_address_1',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Supplemental Address 1'),
          'description' => E::ts('Supplemental Address Information, Line 1'),
          'maxlength' => 96,
          'size' => CRM_Utils_Type::HUGE,
          'import' => TRUE,
          'where' => 'civicrm_securepay.supplemental_address_1',
          'headerPattern' => '/(supplemental(\s)?)?address(\s\d+)?/i',
          'dataPattern' => '/unit|ap(ar)?t(ment)?\s(\d|\w)+/i',
          'export' => TRUE,
          'table_name' => 'civicrm_securepay',
          'entity' => 'Securepay',
          'bao' => 'CRM_ColumbiaSecurepay_DAO_Securepay',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => '1.0',
        ],
        'city' => [
          'name' => 'city',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('City'),
          'description' => E::ts('City, Town or Village Name.'),
          'maxlength' => 64,
          'size' => CRM_Utils_Type::BIG,
          'import' => TRUE,
          'where' => 'civicrm_securepay.city',
          'headerPattern' => '/city/i',
          'dataPattern' => '/^[A-Za-z]+(\.?)(\s?[A-Za-z]+){0,2}$/',
          'export' => TRUE,
          'table_name' => 'civicrm_securepay',
          'entity' => 'Securepay',
          'bao' => 'CRM_ColumbiaSecurepay_DAO_Securepay',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => '1.0',
        ],
        'state' => [
          'name' => 'state',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('State'),
          'description' => E::ts('State.'),
          'maxlength' => 64,
          'size' => CRM_Utils_Type::BIG,
          'import' => TRUE,
          'where' => 'civicrm_securepay.state',
          'export' => TRUE,
          'table_name' => 'civicrm_securepay',
          'entity' => 'Securepay',
          'bao' => 'CRM_ColumbiaSecurepay_DAO_Securepay',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => '1.0',
        ],
        'postal_code' => [
          'name' => 'postal_code',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Postal Code'),
          'description' => E::ts('Store both US (zip5) AND international postal codes. App is responsible for country/region appropriate validation.'),
          'maxlength' => 64,
          'size' => 6,
          'import' => TRUE,
          'where' => 'civicrm_securepay.postal_code',
          'headerPattern' => '/postal|zip/i',
          'dataPattern' => '/\d?\d{4}(-\d{4})?/',
          'export' => TRUE,
          'table_name' => 'civicrm_securepay',
          'entity' => 'Securepay',
          'bao' => 'CRM_ColumbiaSecurepay_DAO_Securepay',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => '1.0',
        ],
        'data' => [
          'name' => 'data',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => E::ts('Data'),
          'description' => E::ts('Secure Pay data'),
          'where' => 'civicrm_securepay.data',
          'table_name' => 'civicrm_securepay',
          'entity' => 'Securepay',
          'bao' => 'CRM_ColumbiaSecurepay_DAO_Securepay',
          'localizable' => 0,
          'serialize' => self::SERIALIZE_JSON,
          'add' => NULL,
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return self::$_tableName;
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'securepay', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'securepay', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [
      'UI_order_id' => [
        'name' => 'UI_order_id',
        'field' => [
          0 => 'order_id',
        ],
        'localizable' => FALSE,
        'sig' => 'civicrm_securepay::0::order_id',
      ],
      'UI_contribution_id' => [
        'name' => 'UI_contribution_id',
        'field' => [
          0 => 'contribution_id',
        ],
        'localizable' => FALSE,
        'sig' => 'civicrm_securepay::0::contribution_id',
      ],
      'UI_receive_date' => [
        'name' => 'UI_receive_date',
        'field' => [
          0 => 'receive_date',
        ],
        'localizable' => FALSE,
        'sig' => 'civicrm_securepay::0::receive_date',
      ],
      'UI_amount' => [
        'name' => 'UI_amount',
        'field' => [
          0 => 'amount',
        ],
        'localizable' => FALSE,
        'sig' => 'civicrm_securepay::0::amount',
      ],
      'UI_first_name' => [
        'name' => 'UI_first_name',
        'field' => [
          0 => 'first_name',
        ],
        'localizable' => FALSE,
        'sig' => 'civicrm_securepay::0::first_name',
      ],
      'UI_last_name' => [
        'name' => 'UI_last_name',
        'field' => [
          0 => 'last_name',
        ],
        'localizable' => FALSE,
        'sig' => 'civicrm_securepay::0::last_name',
      ],
      'UI_email' => [
        'name' => 'UI_email',
        'field' => [
          0 => 'email',
        ],
        'localizable' => FALSE,
        'sig' => 'civicrm_securepay::0::email',
      ],
    ];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
